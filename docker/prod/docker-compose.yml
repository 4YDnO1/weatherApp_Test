services:
  weather_database:
    image: postgres:15-alpine
    container_name: weather_database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pg_database_data:/var/lib/postgresql/data
    networks:
      - weather-database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 5s
      timeout: 3s
      retries: 20

  weather_backend:
    build:
      context: ../../backend
      dockerfile: docker/Dockerfile.prod
    container_name: weather_backend
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      # APP_ENV: local
      # APP_DEBUG: "true"
      # APP_URL: http://localhost:9000
    networks:
      - weather-database-network
      - weather-app-network
      - weather-host-network
    depends_on:
      weather_database:
        condition: service_healthy

  weather_frontend:
    build:
      context: ../../frontend
      dockerfile: docker/Dockerfile.prod
    container_name: weather_frontend
    ports:
      - "80:80"
    environment:
      VITE_API_BASE_URL: /api
    networks:
      - weather-app-network
      - weather-host-network
    depends_on:
      - weather_backend


networks:
  weather-host-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
  weather-app-network:  
    internal: true
  weather-database-network:  
    internal: true

volumes:
  pg_database_data:
    driver: local